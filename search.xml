<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AST那些事</title>
    <url>/2021/07/15/AST/</url>
    <content><![CDATA[<h2 id="Babel-库"><a href="#Babel-库" class="headerlink" title="Babel 库"></a>Babel 库</h2><p><code>@babel/core</code> babel 核心库</p>
<p><code>@babel/parser</code> 将代码解析为 AST 语法树</p>
<p><code>@babel/types</code> AST 节点类型处理</p>
<p><code>@babel/traverse</code> AST 树节点遍历</p>
<p><code>@babel/generator</code> AST 节点转换为代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&#x27;@babel/parser&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">&#x27;@babel/traverse&#x27;</span>).default</span><br><span class="line"><span class="keyword">const</span> types = <span class="built_in">require</span>(<span class="string">&#x27;@babel/types&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> generator = <span class="built_in">require</span>(<span class="string">&#x27;@babel/generator&#x27;</span>).default</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> jscode = fs.readFileSync(<span class="string">&#x27;./ast_demo_one.js&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">encoding</span>: <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ast = parser.parse(jscode)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> visitor = &#123;</span><br><span class="line">    <span class="function"><span class="title">StringLiteral</span>(<span class="params">path</span>)</span> &#123;</span><br><span class="line">        path.replace</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">traverse(ast, visitor)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> code = generator(ast).code</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(code)</span><br></pre></td></tr></table></figure>

<h2 id="path-对象"><a href="#path-对象" class="headerlink" title="path 对象"></a>path 对象</h2><h3 id="repalceInline"><a href="#repalceInline" class="headerlink" title="repalceInline"></a>repalceInline</h3><p>作用：替换节点，该方法接收一个参数，如果参数不为数组，那等同于<code>replaceWith</code>；如果参数是一个数组，那么等同于<code>replaceWithMultiple</code></p>
<h3 id="insertBefore-insertAfter"><a href="#insertBefore-insertAfter" class="headerlink" title="insertBefore | insertAfter"></a>insertBefore | insertAfter</h3><p>作用：插入节点</p>
<h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><p>作用：删除节点</p>
<h2 id="利用-AST-实现代码混淆"><a href="#利用-AST-实现代码混淆" class="headerlink" title="利用 AST 实现代码混淆"></a>利用 AST 实现代码混淆</h2>]]></content>
  </entry>
  <entry>
    <title>JavaScript 混淆那些事儿</title>
    <url>/2021/07/08/JavaScript%E6%B7%B7%E6%B7%86%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
    <content><![CDATA[<p><a href="https://obfuscator.io/">ob 在线混淆</a></p>
<p>防格式化</p>
<p>防debug</p>
<h2 id="访问对象的两种方式"><a href="#访问对象的两种方式" class="headerlink" title="访问对象的两种方式"></a>访问对象的两种方式</h2><ol>
<li><p>object.attr</p>
</li>
<li><p>object [ ‘attr’ ]；</p>
<p>此种方式就可以通过混淆拼接里面的<code>attr</code>字符窜来达到混淆加密JavaScript脚本的目的；</p>
</li>
</ol>
<h2 id="字符窜混淆"><a href="#字符窜混淆" class="headerlink" title="字符窜混淆"></a>字符窜混淆</h2><h3 id="1-ASCLL-码混淆"><a href="#1-ASCLL-码混淆" class="headerlink" title="1. ASCLL 码混淆"></a>1. ASCLL 码混淆</h3><p>使用 charCodeAt 方法来获取该字符的 Unicode  码，同时配合 eval 方法可以来混淆代码</p>
<p>使用 fromCharCode 方法来获取该 Unicode  码对应的字符</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;a&#x27;</span>.charCodeAt(<span class="number">0</span>)</span><br><span class="line"><span class="comment">// 97</span></span><br><span class="line"><span class="built_in">String</span>.fromCharCode(<span class="number">97</span>)</span><br><span class="line"><span class="comment">// a</span></span><br></pre></td></tr></table></figure>



<h3 id="2-十六进制字符窜"><a href="#2-十六进制字符窜" class="headerlink" title="2. 十六进制字符窜"></a>2. 十六进制字符窜</h3><p><code>&#39;yyy-MM-dd&#39;</code>-&gt; <code>&#39;\x79\x79\x79\x79\x2d\x4d\x4d\x2d\x64\x64&#39;</code></p>
<p>十六进制字符串可以放控制台得到明文</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str2hex</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> hexStr = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">Array</span>.prototype.forEach.call(str, <span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        hexStr += <span class="string">&#x27;\x&#x27;</span> + str.charCodeAt(index).toString(<span class="string">&#x27;16&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> hexStr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">str2hex(<span class="string">&#x27;yyyy-MM-dd&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="3-Unicode-字符窜"><a href="#3-Unicode-字符窜" class="headerlink" title="3. Unicode 字符窜"></a>3. Unicode 字符窜</h3><p>相较于 十六进制 字符窜，只是把 <code>\x</code> 替换为了 <code>\u</code></p>
<p>JavaScript 中的<code>标识符支持 Unicode 编码</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">consoe.log(<span class="string">&#x27;haha&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.\u006c\u006f\u0067(<span class="string">&#x27;hahaha&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="4-常量加密"><a href="#4-常量加密" class="headerlink" title="4. 常量加密"></a>4. 常量加密</h3><h4 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h4><p>通过使用系统自带的加密函数（如md5、base64等）或者自定义的加密函数对代码处理得到密文，生产环境中的代码仅仅出现解密方法和密文，以此来达到保护代码的作用</p>
<h4 id="数值常量"><a href="#数值常量" class="headerlink" title="数值常量"></a>数值常量</h4><p>使用位异或的特性来加密，比如，a^b = c，那么 c^b = a。</p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组混淆"><a href="#数组混淆" class="headerlink" title="数组混淆"></a>数组混淆</h3><p>将处理过的对象属性字符窜全都提取到一个数组中，使用时通过数组下标的方式调用来进一步加深逆向的难度</p>
<h3 id="数组乱序"><a href="#数组乱序" class="headerlink" title="数组乱序"></a>数组乱序</h3><p>为了避免逆向人员把提取出来的混淆数组硬杠将其对应到相对于的调用处，通常还会再加一层难度，即使用一个函数来把数组顺序打乱，调用的时候再还原为之前的数组</p>
<h2 id="花指令"><a href="#花指令" class="headerlink" title="花指令"></a>花指令</h2><p>目的：膨胀代码量</p>
<p>在代码中添加大量没有实际意义的代码，比如可以直接调用函数 fun 获得 a+b 的值，使用花指令后就是 func 调用func1 ，func1 再调用 func2 ，func2 才返回 a+b 的值，以此来增加大量代码</p>
<h2 id="jsfuck"><a href="#jsfuck" class="headerlink" title="jsfuck"></a>jsfuck</h2><p>jsfuck可以算是一种编码。它能把JS代码转化成只用6个字符就可以表示的代码，并且完全可以正常执行。</p>
<p>JavaScript 中的 + 号，作为二次运算符的时候，如果有一边是字符窜的话就代表拼接字符窜，如果两边都没有字符串的话代表数值运算。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(!+[]+!![])</span><br><span class="line"><span class="comment">// 2 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ! = false</span></span><br><span class="line"><span class="comment">// [] = true</span></span><br><span class="line"><span class="comment">// !![] = true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// true + ture = 2</span></span><br><span class="line"><span class="comment">// true + false = 1</span></span><br></pre></td></tr></table></figure>

<h2 id="流程平坦化"><a href="#流程平坦化" class="headerlink" title="流程平坦化"></a>流程平坦化</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">var</span> b = a + <span class="number">2000</span>;</span><br><span class="line">    <span class="keyword">var</span> c = b + <span class="number">3000</span>;</span><br><span class="line">    <span class="keyword">var</span> d = c + <span class="number">4000</span>;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 混淆执行流程</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">while</span>()&#123;</span><br><span class="line">      <span class="keyword">switch</span>()&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">           <span class="keyword">var</span> d = c + <span class="number">4000</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">           <span class="keyword">var</span> b = a + <span class="number">2000</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">           <span class="keyword">var</span> a = <span class="number">1000</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">           <span class="keyword">var</span> c = b + <span class="number">3000</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">           <span class="keyword">return</span> d;</span><br><span class="line">	&#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="逗号表达式混淆"><a href="#逗号表达式混淆" class="headerlink" title="逗号表达式混淆"></a>逗号表达式混淆</h2><p>主要作用是把多个表达式或者语句连接成一个复合语句，会返回最后一个表达式的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item=<span class="number">0</span>; item&lt;<span class="number">10</span>; item++)</span><br><span class="line">  <span class="built_in">console</span>.log(item),</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`index1: <span class="subst">$&#123;item&#125;</span>`</span>),  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`index2: <span class="subst">$&#123;item&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;yang&#x27;</span>,</span><br><span class="line">    <span class="attr">add</span>: <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">        reutrn a + b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sub</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">var</span> b = sub(a, <span class="number">3000</span>) +<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> c = b + obj.add(b, <span class="number">2000</span>)</span><br><span class="line">    <span class="keyword">return</span> c + obj.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test 函数中的前两句可以处理为：b =  ( a = 1000, sub ) ( a, 3000 ) + 1</span></span><br><span class="line"><span class="comment">// test 函数可以处理为：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a, b, c</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b =  ( a = <span class="number">1000</span>, sub ) ( a, <span class="number">3000</span> ) + <span class="number">1</span>,</span><br><span class="line">    	c = b + obj.add(b, <span class="number">2000</span>)</span><br><span class="line">    	c + obj.name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/07/01/hello-hexo/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hello Next</title>
    <url>/2021/07/02/hello-next/</url>
    <content><![CDATA[<h2 id="Quick-Config"><a href="#Quick-Config" class="headerlink" title="Quick Config"></a>Quick Config</h2><h3 id="添加分类-标签-关于模块"><a href="#添加分类-标签-关于模块" class="headerlink" title="添加分类/标签/关于模块"></a>添加分类/标签/关于模块</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page categories</span><br><span class="line">$ hexo new page tags</span><br><span class="line">$ hexo new page about</span><br></pre></td></tr></table></figure>

<h3 id="添加搜索模块"><a href="#添加搜索模块" class="headerlink" title="添加搜索模块"></a>添加搜索模块</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn add hexo-generator-searchdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># _config.yml 配置文件开启搜索</span></span><br><span class="line">local_search:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="添加网站动画-背景效果"><a href="#添加网站动画-背景效果" class="headerlink" title="添加网站动画/背景效果"></a>添加网站动画/背景效果</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># JavaScript 3D library.</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-three <span class="built_in">source</span>/lib/three</span><br><span class="line"><span class="comment"># Canvas-ribbon</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-canvas-ribbon <span class="built_in">source</span>/lib/canvas-ribbon</span><br><span class="line"></span><br><span class="line"><span class="comment"># _config.yml 配置文件开启效果</span></span><br><span class="line"><span class="comment"># 3D 动画</span></span><br><span class="line">three:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  three_waves: <span class="literal">false</span></span><br><span class="line">  canvas_lines: <span class="literal">true</span></span><br><span class="line">  canvas_sphere: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 随机绸缎背景</span></span><br><span class="line">canvas_ribbon:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  size: 200 <span class="comment"># The width of the ribbon</span></span><br><span class="line">  alpha: 0.22 <span class="comment"># The transparency of the ribbon</span></span><br><span class="line">  zIndex: -1 <span class="comment"># The display level of the ribbon</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="添加文章字数统计与预估阅读时间"><a href="#添加文章字数统计与预估阅读时间" class="headerlink" title="添加文章字数统计与预估阅读时间"></a>添加文章字数统计与预估阅读时间</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn add hexo-symbols-count-time</span><br><span class="line"></span><br><span class="line"><span class="comment"># _config.yml 配置文件开启</span></span><br><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: <span class="literal">true</span></span><br><span class="line">  item_text_post: <span class="literal">true</span></span><br><span class="line">  item_text_total: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>
